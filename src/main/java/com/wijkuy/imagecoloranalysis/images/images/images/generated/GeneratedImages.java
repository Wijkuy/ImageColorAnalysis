package com.wijkuy.imagecoloranalysis.images.images.images.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.wijkuy.imagecoloranalysis.images.images.images.Images;

/**
 * The generated base for the {@link
 * com.wijkuy.imagecoloranalysis.images.images.images.Images}-interface
 * representing entities of the {@code images}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedImages {
    
    /**
     * This Field corresponds to the {@link Images} field that can be obtained
     * using the {@link Images#getId()} method.
     */
    IntField<Images, Integer> ID = IntField.create(
        Identifier.ID,
        Images::getId,
        Images::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Images} field that can be obtained
     * using the {@link Images#getUrl()} method.
     */
    StringField<Images, String> URL = StringField.create(
        Identifier.URL,
        Images::getUrl,
        Images::setUrl,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Images} field that can be obtained
     * using the {@link Images#getColor1()} method.
     */
    StringField<Images, String> COLOR1 = StringField.create(
        Identifier.COLOR1,
        Images::getColor1,
        Images::setColor1,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Images} field that can be obtained
     * using the {@link Images#getColor2()} method.
     */
    StringField<Images, String> COLOR2 = StringField.create(
        Identifier.COLOR2,
        Images::getColor2,
        Images::setColor2,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Images} field that can be obtained
     * using the {@link Images#getColor3()} method.
     */
    StringField<Images, String> COLOR3 = StringField.create(
        Identifier.COLOR3,
        Images::getColor3,
        Images::setColor3,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Images. The id field corresponds to the database
     * column images.images.images.id.
     * 
     * @return the id of this Images
     */
    int getId();
    
    /**
     * Returns the url of this Images. The url field corresponds to the database
     * column images.images.images.url.
     * 
     * @return the url of this Images
     */
    String getUrl();
    
    /**
     * Returns the color1 of this Images. The color1 field corresponds to the
     * database column images.images.images.color1.
     * 
     * @return the color1 of this Images
     */
    String getColor1();
    
    /**
     * Returns the color2 of this Images. The color2 field corresponds to the
     * database column images.images.images.color2.
     * 
     * @return the color2 of this Images
     */
    String getColor2();
    
    /**
     * Returns the color3 of this Images. The color3 field corresponds to the
     * database column images.images.images.color3.
     * 
     * @return the color3 of this Images
     */
    String getColor3();
    
    /**
     * Sets the id of this Images. The id field corresponds to the database
     * column images.images.images.id.
     * 
     * @param id to set of this Images
     * @return   this Images instance
     */
    Images setId(int id);
    
    /**
     * Sets the url of this Images. The url field corresponds to the database
     * column images.images.images.url.
     * 
     * @param url to set of this Images
     * @return    this Images instance
     */
    Images setUrl(String url);
    
    /**
     * Sets the color1 of this Images. The color1 field corresponds to the
     * database column images.images.images.color1.
     * 
     * @param color1 to set of this Images
     * @return       this Images instance
     */
    Images setColor1(String color1);
    
    /**
     * Sets the color2 of this Images. The color2 field corresponds to the
     * database column images.images.images.color2.
     * 
     * @param color2 to set of this Images
     * @return       this Images instance
     */
    Images setColor2(String color2);
    
    /**
     * Sets the color3 of this Images. The color3 field corresponds to the
     * database column images.images.images.color3.
     * 
     * @param color3 to set of this Images
     * @return       this Images instance
     */
    Images setColor3(String color3);
    
    enum Identifier implements ColumnIdentifier<Images> {
        
        ID     ("id"),
        URL    ("url"),
        COLOR1 ("color1"),
        COLOR2 ("color2"),
        COLOR3 ("color3");
        
        private final String columnName;
        private final TableIdentifier<Images> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "images";
        }
        
        @Override
        public String getSchemaName() {
            return "images";
        }
        
        @Override
        public String getTableName() {
            return "images";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Images> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}