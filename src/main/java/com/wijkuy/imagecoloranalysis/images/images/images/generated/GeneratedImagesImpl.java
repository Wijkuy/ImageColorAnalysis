package com.wijkuy.imagecoloranalysis.images.images.images.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.wijkuy.imagecoloranalysis.images.images.images.Images;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.wijkuy.imagecoloranalysis.images.images.images.Images}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedImagesImpl implements Images {
    
    private int id;
    private String url;
    private String color1;
    private String color2;
    private String color3;
    
    protected GeneratedImagesImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getUrl() {
        return url;
    }
    
    @Override
    public String getColor1() {
        return color1;
    }
    
    @Override
    public String getColor2() {
        return color2;
    }
    
    @Override
    public String getColor3() {
        return color3;
    }
    
    @Override
    public Images setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Images setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Images setColor1(String color1) {
        this.color1 = color1;
        return this;
    }
    
    @Override
    public Images setColor2(String color2) {
        this.color2 = color2;
        return this;
    }
    
    @Override
    public Images setColor3(String color3) {
        this.color3 = color3;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "     + Objects.toString(getId()));
        sj.add("url = "    + Objects.toString(getUrl()));
        sj.add("color1 = " + Objects.toString(getColor1()));
        sj.add("color2 = " + Objects.toString(getColor2()));
        sj.add("color3 = " + Objects.toString(getColor3()));
        return "ImagesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Images)) { return false; }
        final Images thatImages = (Images)that;
        if (this.getId() != thatImages.getId()) {return false; }
        if (!Objects.equals(this.getUrl(), thatImages.getUrl())) {return false; }
        if (!Objects.equals(this.getColor1(), thatImages.getColor1())) {return false; }
        if (!Objects.equals(this.getColor2(), thatImages.getColor2())) {return false; }
        if (!Objects.equals(this.getColor3(), thatImages.getColor3())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getUrl());
        hash = 31 * hash + Objects.hashCode(getColor1());
        hash = 31 * hash + Objects.hashCode(getColor2());
        hash = 31 * hash + Objects.hashCode(getColor3());
        return hash;
    }
}